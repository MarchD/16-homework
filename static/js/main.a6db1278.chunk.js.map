{"version":3,"sources":["stories/story.js","stories/createStory.js","stories/stories.js","App.js","serviceWorker.js","index.js"],"names":["Story","props","className","style","backgroundImage","cover","avatar","name","CreateStory","onClick","addStory","storiesMock","user","Stories","state","stories","setState","prevState","slice","changeValue","field","e","target","value","this","map","story","time","key","id","onChange","bind","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAiBeA,G,MAZD,SAACC,GAAD,OACV,yBAAKC,UAAU,QAAQC,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMI,MAAf,OAC3C,yBAAKH,UAAU,kBAGf,yBAAKA,UAAU,eAAeC,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMK,OAAf,QACtD,yBAAKJ,UAAU,cACVD,EAAMM,SCVNC,EAAc,SAACP,GAAD,OACvB,yBAAKC,UAAU,qBAAqBC,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMK,OAAf,OAExD,yBAAKJ,UAAU,eACX,yBAAKA,UAAU,kBAAkBO,QAASR,EAAMS,UAAhD,KAGA,0BAAMR,UAAU,kCAAhB,6CACuB,6BADvB,iDCJNS,EAAc,CAAC,CACjBN,MAAO,iHACPC,OAAQ,iHACRC,KAAM,kBACR,CACEF,MAAO,iHACPC,OAAQ,iHACRC,KAAM,YACR,CACEF,MAAO,iHACPC,OAAQ,iHACRC,KAAM,YACR,CACEF,MAAO,iHACPC,OAAQ,iHACRC,KAAM,YACR,CACEF,MAAO,iHACPC,OAAQ,iHACRC,KAAM,aAGJK,EACM,iHAGSC,E,4MACjBC,MAAQ,CACJC,QAAQ,GAAD,OAAMJ,GACbJ,KAAM,eACNF,MAAO,iHACPC,OAAQ,kH,EAGZI,SAAW,WACP,EAAKM,UAAS,SAACC,GACX,MAAO,CACHF,QAAS,CAAC,CACNR,KAAMU,EAAUV,KAChBF,MAAOY,EAAUZ,MACjBC,OAAQW,EAAUX,SAHb,mBAIHW,EAAUF,UAASG,MAAM,EAAG,Q,EAK9CC,YAAc,SAACC,EAAOC,GAClB,EAAKL,SAAL,eACKI,EAAQC,EAAEC,OAAOC,S,uDAQtB,OACI,oCACI,yBAAKrB,UAAU,mBACX,kBAAC,EAAD,CAAaI,OAAQM,EAAaF,SAAUc,KAAKd,WAChDc,KAAKV,MAAMC,QAAQU,KAAI,SAACC,GAErB,OACI,kBAAC,EAAD,CAAOpB,OAAQoB,EAAMpB,OAAQD,MAAOqB,EAAMrB,MAAOE,KAAMmB,EAAMnB,KAAMoB,KAAM,GAAIC,IAAKF,EAAMG,SAKpG,2BAAON,MAAOC,KAAKV,MAAMP,KAAMuB,SAAUN,KAAKL,YAAYY,KAAKP,KAAM,UACrE,2BAAOD,MAAOC,KAAKV,MAAMR,OAAQwB,SAAUN,KAAKL,YAAYY,KAAKP,KAAM,YACvE,2BAAOD,MAAOC,KAAKV,MAAMT,MAAOyB,SAAUN,KAAKL,YAAYY,KAAKP,KAAM,gB,GA5CjDQ,aCVtBC,E,uKAbP,OAEI,6BAEI,kBAAC,EAAD,W,GAREC,IAAMF,WCQJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a6db1278.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\n\r\n//{avatar:, cover:, name: }\r\n\r\nconst Story = (props) => (\r\n    <div className=\"story\" style={{ backgroundImage: `url(${props.cover})` }}>\r\n        <div className=\"story-overlay\">\r\n\r\n        </div>\r\n        <div className=\"story-avatar\" style={{ backgroundImage: `url(${props.avatar})` }}></div>\r\n        <div className=\"story-name\">\r\n            {props.name}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Story;","import React, {Component} from \"react\";\r\n\r\nexport const CreateStory = (props) => (\r\n    <div className=\"story story-create\" style={{ backgroundImage: `url(${props.avatar})` }}>\r\n\r\n        <div className=\"add-history\">\r\n            <div className=\"add-history-btn\" onClick={props.addStory}>\r\n                +\r\n            </div>\r\n            <span className=\"story-name story__name__create\">\r\n                            Создать<br />\r\n                            историю\r\n                        </span>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n","import React, {Component} from \"react\";\r\nimport \"./stories.css\";\r\nimport Story from \"./story\";\r\nimport {CreateStory} from \"./createStory\";\r\n\r\nconst storiesMock = [{\r\n    cover: 'https://images.pexels.com/photos/1308885/pexels-photo-1308885.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    avatar: 'https://images.pexels.com/photos/2804282/pexels-photo-2804282.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    name: 'Marina Dubchak'\r\n},{\r\n    cover: 'https://images.pexels.com/photos/1308885/pexels-photo-1308885.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    avatar: 'https://images.pexels.com/photos/2804282/pexels-photo-2804282.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    name: 'Df sefse'\r\n},{\r\n    cover: 'https://images.pexels.com/photos/1308885/pexels-photo-1308885.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    avatar: 'https://images.pexels.com/photos/2804282/pexels-photo-2804282.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    name: 'Df sefse'\r\n},{\r\n    cover: 'https://images.pexels.com/photos/1308885/pexels-photo-1308885.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    avatar: 'https://images.pexels.com/photos/2804282/pexels-photo-2804282.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    name: 'Df sefse'\r\n},{\r\n    cover: 'https://images.pexels.com/photos/1308885/pexels-photo-1308885.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    avatar: 'https://images.pexels.com/photos/2804282/pexels-photo-2804282.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n    name: 'Df sefse'\r\n}];\r\n\r\nconst user = {\r\n    avatar: 'https://images.pexels.com/photos/2120114/pexels-photo-2120114.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\r\n}\r\n\r\nexport default class Stories extends Component{\r\n    state = { //состояние компонента\r\n        stories: [...storiesMock], //TO DO \r\n        name: \"Default Name\",\r\n        cover: 'https://images.pexels.com/photos/1308885/pexels-photo-1308885.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\r\n        avatar: 'https://images.pexels.com/photos/2804282/pexels-photo-2804282.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\r\n    }\r\n\r\n    addStory = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                stories: [{\r\n                    name: prevState.name,\r\n                    cover: prevState.cover,\r\n                    avatar: prevState.avatar\r\n                }, ...prevState.stories].slice(0, 5)\r\n            };\r\n        })\r\n    }\r\n\r\n    changeValue = (field, e) => {\r\n        this.setState({\r\n            [field]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // const  backgroundStyle = {\r\n        //     backgroundImage: ''\r\n        // }\r\n        return (\r\n            <>\r\n                <div className=\"stories-wrapper\">\r\n                    <CreateStory avatar={user.avatar} addStory={this.addStory}/>\r\n                    {this.state.stories.map((story) => {\r\n\r\n                        return (\r\n                            <Story avatar={story.avatar} cover={story.cover} name={story.name} time={10} key={story.id}/>\r\n                        )\r\n\r\n                    })}\r\n                </div>\r\n                <input value={this.state.name} onChange={this.changeValue.bind(this, \"name\")}/>\r\n                <input value={this.state.avatar} onChange={this.changeValue.bind(this, \"avatar\")}/>\r\n                <input value={this.state.cover} onChange={this.changeValue.bind(this, \"cover\")}/>\r\n            </>\r\n        );\r\n    }\r\n};","import React from 'react';\nimport Stories from \"./stories/stories\";\n\n\nclass App extends React.Component {\n\n\n    render(){\n        return(\n\n            <div>\n\n                <Stories />\n\n\n            </div>\n\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}